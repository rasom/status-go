// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 0001_app.down.sql (387B)
// 0001_app.up.sql (3.454kB)
// 0002_tokens.down.sql (19B)
// 0002_tokens.up.sql (248B)
// doc.go (74B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_appDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xcd\x0e\x82\x40\x0c\x84\xef\x3c\x05\xef\xc1\x49\x03\x07\x13\xa3\xc6\x78\xf0\xd6\xac\x4b\x85\x46\xd8\xae\x6d\xf1\xe7\xed\x4d\x4c\xfc\x59\x85\xeb\x37\x93\x6f\xa6\xdc\xae\x37\xf9\x6e\x36\x5f\x56\xb9\xa2\x19\x85\x46\x8b\xec\x0b\x3a\xef\x79\x08\x96\xc2\x83\xf0\x55\x51\xc6\x21\xb4\xa4\xc6\x72\x4f\xc2\xda\xc5\x98\xd6\x23\x4a\x4f\xaa\xc4\x21\xe5\x26\x2e\xe8\xf1\x4f\xde\xb1\x3f\x8d\x3f\x03\x63\x18\x89\x7b\x47\x9d\xa2\x5c\x7e\x4d\x1f\x0e\x82\xe7\x01\xd5\xa0\x71\xef\x6f\x8b\x55\x59\xed\xa7\x3a\xe0\x5b\x67\x40\x35\x50\x7d\x9b\x72\x1a\x47\xf2\x93\x8b\x4f\xc1\x4b\x29\x2e\x34\xa8\x45\xf6\x08\x00\x00\xff\xff\xef\x20\x3b\x16\x83\x01\x00\x00")

func _0001_appDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_appDownSql,
		"0001_app.down.sql",
	)
}

func _0001_appDownSql() (*asset, error) {
	bytes, err := _0001_appDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_app.down.sql", size: 387, mode: os.FileMode(0644), modTime: time.Unix(1573216280, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x9c, 0xd2, 0xe1, 0x1d, 0x8, 0x34, 0x6a, 0xc8, 0x37, 0x13, 0xb3, 0x9f, 0x26, 0x23, 0x33, 0xd4, 0x25, 0x8, 0xed, 0x53, 0xe6, 0xd, 0x46, 0xc9, 0xf4, 0x24, 0xf8, 0x1, 0x1f, 0xf5, 0xc8}}
	return a, nil
}

var __0001_appUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x93\xaa\x38\x10\xbe\xf3\x2b\x72\xd4\x2a\x2e\x7b\x7e\x27\xd4\xe8\x50\xeb\x83\x5d\xc4\x9d\x79\xa7\x54\x84\x16\x53\x83\x84\x97\x84\x71\xfc\xf7\x5b\x01\x42\x50\x41\x9d\xb7\xbb\x55\x7b\x93\x74\xa7\xfd\xbe\xaf\xbf\x74\x32\x8f\xb0\x17\x63\x14\x7b\xb3\x35\x46\xfe\x12\x05\x61\x8c\xf0\x9b\xbf\x89\x37\x48\x82\x52\xac\xc8\x24\x9a\x38\xea\x5c\x02\xfa\xcb\x8b\xe6\x2f\x5e\x84\xfe\x88\xfc\xef\x5e\xf4\x03\xfd\x8e\x7f\xb8\xce\x07\xcd\x2b\x40\xb3\x75\x38\x73\xa6\xe8\xd5\x8f\x5f\xc2\x6d\x8c\xa2\xf0\xd5\x5f\x7c\x73\x9c\x3b\xc5\x69\x92\xf0\xaa\x50\xba\x38\x4d\x53\x01\x52\x0e\xd7\x3f\xd1\x3c\x07\x85\x66\x61\xb8\xc6\x5e\xe0\x3a\xc9\x81\xf6\xbe\x6a\x5c\x31\x7e\x8b\x5d\x47\x2a\x2e\x68\x66\xbe\xca\x6a\xf7\x0e\xe7\x1a\x97\xeb\x94\x54\x1d\xda\xf5\x82\x1e\x4d\x4a\xc2\x73\x2e\xcc\x6f\x01\x54\x41\x4a\xa8\x42\x0b\x2f\xc6\xb1\xff\x1d\xd7\x60\x83\xed\x7a\xed\x3a\x55\x99\x8e\x46\xc7\x59\x6f\x03\xff\xcf\x2d\x46\x7e\xb0\xc0\x6f\xa8\x2a\xd8\xcf\x0a\x48\xc3\x86\x18\xc6\x61\xd0\xd3\xa1\x89\x4d\xd1\xeb\x0b\x8e\x70\xf7\xf9\xed\x5e\x39\x2d\xc6\x70\x31\x1d\xe9\x4a\xd5\x1f\x5d\xa1\xa6\x82\x65\x4c\xda\x5d\x57\x05\xba\xb8\x2d\x63\x97\xee\xf7\x76\x27\xf8\x49\x82\xd0\xbd\x65\x69\xad\xf0\x65\x4f\xbb\x26\xf4\x34\x56\xec\x08\x52\xd1\x63\x89\xb6\x9b\x95\xbf\x0a\xf0\x02\xcd\xfc\x95\x1f\xc4\xae\x93\xd2\xb2\x34\x2d\x47\x0b\xbc\xf4\xb6\xeb\x18\xed\x69\x2e\xc1\x75\x0e\x4c\xf7\xfd\xec\x17\x29\x7c\xa2\x6d\xb0\x69\x76\xfa\x41\xfc\x35\x37\x1a\xc4\xa4\xad\x87\x26\x4e\xbb\x44\x0c\x03\x0b\xd5\xe4\x34\xd6\x59\x86\x11\xf6\x57\x81\x66\x36\xb1\x7b\xa6\x28\xc2\x4b\x1c\xe1\x60\x8e\x6d\xf5\x89\x5e\x0f\x35\x87\x35\x8e\x31\x9a\x7b\x9b\xb9\xb7\xc0\xce\x03\x35\x35\x7d\x2d\xa5\x55\xad\x27\xe6\xd7\x68\x96\x20\x8e\x4c\x4a\xc6\x0b\x5d\x50\x17\x26\x43\xbd\xb0\x69\xd7\x91\x3e\xd9\x6e\xfb\x05\xd7\x1a\xed\xa4\x59\x1e\xa6\x7a\x0f\xa0\x12\xb4\x90\xfb\xc6\x3a\x05\xa8\x13\x17\xef\xba\x01\x5d\x63\x1b\x4b\xf4\x7b\x41\xe5\xa1\x1b\x1c\x76\xf9\x7a\xa4\xd8\xc8\x2e\x7f\x27\x23\x9b\xd4\x67\x3b\x2f\x24\x14\x29\x88\x81\x0c\x01\x09\xb0\x52\xb5\x69\x39\xcf\xda\x5f\x17\xe3\xf1\xf2\xbf\x8a\xea\xb8\x03\x71\x0b\xbc\xe7\xf7\x11\x72\x8f\x7c\xb1\xcb\x79\xf2\xfe\x4f\x85\xfa\x75\x78\xae\x73\x00\x9a\xd6\xe7\xb2\x3b\x94\x4b\x6f\xbd\xc1\xae\x33\x0f\x83\x4d\x1c\x79\x3a\xbb\x1d\x54\x35\x56\x52\x82\x20\x2d\x58\x33\xce\x26\x16\xbc\xab\x21\x4e\x47\x37\x37\x48\x1f\xd5\x68\xb2\xa6\xcf\x69\x47\x4e\x4c\x1d\x48\xed\x39\x9a\xa8\xf6\x54\x3c\xa5\xe6\x7d\x7f\x8d\x89\x7a\xed\x3d\x6d\x21\x9a\xc2\xb3\x22\x1e\x69\x59\xb2\x22\x23\x7b\x2e\xcc\xcc\x26\x8a\xdf\xd1\xb6\x45\xe9\x5a\x4c\xae\x65\xf7\xac\x46\x82\x16\x19\xfc\x4b\xc2\xec\x05\x3f\x0e\xcb\xa2\xf8\x80\x07\x87\x4e\xd5\x23\xd4\xe6\x06\xeb\x94\xf9\x8f\x7b\x2a\xcf\x45\x82\xea\x6b\xaa\x3f\x1b\x7b\x8e\xb4\x9b\x2f\xef\x84\x1a\xdb\x80\x75\x6f\xa7\xe6\xff\xc0\x0b\x47\xca\x72\x09\xe2\xa3\x99\xcc\x08\x21\xc4\xd2\xe1\xf7\x9a\x8e\xd5\x77\xca\xad\x8c\x3a\x34\x2e\xb2\x8e\x96\x54\xca\x13\x17\xa9\x3d\x20\x7a\x75\x9f\x03\xa8\x01\x23\x7c\xe5\xe6\xb3\x04\x88\x80\x9f\x15\x48\x45\x32\x5a\x1a\x32\x19\x2d\x1b\x6f\xf6\x5f\x10\x78\x85\xaf\xf1\xe9\x3c\xc5\x1f\x65\x0d\xbe\x79\x74\xa0\x7e\xae\x5d\xbf\x27\xc6\x79\x34\x0f\xb5\x11\xe4\xa4\x2d\x46\x58\xfa\xa9\x2d\x33\x4a\xb0\xcd\x7b\xba\xc1\x44\xf1\x92\x25\x46\x99\xfa\x63\xbc\xd3\x6d\x71\x79\xd9\xb0\x9c\x4a\x65\x50\x74\x1a\x99\xf1\xf6\x5b\x93\x93\x32\x99\xf0\x0f\x10\xe7\x9b\x97\x5d\x3b\xff\x6a\x23\x41\xc6\x15\xd3\x8f\xce\xe1\xac\x5f\xf6\x40\x8d\xdb\xe8\xd4\x4d\xb8\x7e\x8f\x46\x29\xe7\xfc\x04\x96\x5e\x63\x9b\x96\x63\x93\x70\x60\xd9\xa1\x9f\xa1\xb8\x89\xdf\xc2\xfd\x3b\x00\x00\xff\xff\xec\xe0\x22\x75\x7e\x0d\x00\x00")

func _0001_appUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_appUpSql,
		"0001_app.up.sql",
	)
}

func _0001_appUpSql() (*asset, error) {
	bytes, err := _0001_appUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_app.up.sql", size: 3454, mode: os.FileMode(0644), modTime: time.Unix(1577277715, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x43, 0x65, 0xba, 0x25, 0xcb, 0x55, 0xc5, 0x44, 0xef, 0xee, 0x8c, 0xf0, 0xae, 0x44, 0xde, 0x16, 0xe2, 0x21, 0x33, 0x6f, 0x17, 0x30, 0x9a, 0x66, 0x5b, 0x36, 0xd4, 0x54, 0x3e, 0x59, 0x21}}
	return a, nil
}

var __0002_tokensDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc9\xcf\x4e\xcd\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\xf0\xdb\x32\xa7\x13\x00\x00\x00")

func _0002_tokensDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_tokensDownSql,
		"0002_tokens.down.sql",
	)
}

func _0002_tokensDownSql() (*asset, error) {
	bytes, err := _0002_tokensDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_tokens.down.sql", size: 19, mode: os.FileMode(0644), modTime: time.Unix(1576159007, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x31, 0x2, 0xcc, 0x2f, 0x38, 0x90, 0xf7, 0x58, 0x37, 0x47, 0xf4, 0x18, 0xf7, 0x72, 0x74, 0x67, 0x14, 0x7e, 0xf3, 0xb1, 0xd6, 0x5f, 0xb0, 0xd5, 0xe7, 0x91, 0xf4, 0x26, 0x77, 0x8e, 0x68}}
	return a, nil
}

var __0002_tokensUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x6a\x85\x30\x10\x46\xf7\x79\x8a\x6f\x79\x05\xdf\xa0\xab\xa8\xa9\x0e\xb5\xb1\xc4\xb1\xea\xaa\x58\x93\x85\xf8\x13\x30\x42\xe9\xdb\x17\x4b\x4b\x2b\xdc\xed\x37\x67\x0e\x27\x35\x4a\xb2\x02\xcb\xa4\x54\xa0\x47\xe8\x8a\xa1\x3a\xaa\xb9\xc6\xe1\x67\xb7\x05\xdc\x04\x30\x58\xbb\xbb\x10\xf0\x2a\x4d\x5a\x48\xf3\x4d\xe9\xa6\x2c\x63\x01\x6c\xee\xf8\xf0\xfb\xfc\x36\x59\x34\xba\xa6\x5c\xab\x0c\x09\xe5\xa4\xf9\x8a\x0d\xab\x03\xab\xee\xba\x86\xcf\xf5\xdd\x2f\x77\xbd\xd6\x8d\xd3\x3a\x2c\xe1\xcf\x4a\x9a\xcf\xc3\xe8\x17\xbf\xff\xbe\x9c\xc3\x8b\xa1\x67\x69\x7a\x3c\xa9\x1e\xb7\x9f\xd4\xf8\x5f\x57\x24\x22\xb4\xc4\x45\xd5\x30\x4c\xd5\x52\xf6\x20\xc4\x57\x00\x00\x00\xff\xff\x73\xf3\x87\xe5\xf8\x00\x00\x00")

func _0002_tokensUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_tokensUpSql,
		"0002_tokens.up.sql",
	)
}

func _0002_tokensUpSql() (*asset, error) {
	bytes, err := _0002_tokensUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_tokens.up.sql", size: 248, mode: os.FileMode(0644), modTime: time.Unix(1576159007, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xd6, 0xde, 0xd3, 0x7b, 0xee, 0x92, 0x11, 0x38, 0xa4, 0xeb, 0x84, 0xca, 0xcb, 0x37, 0x75, 0x5, 0x77, 0x7f, 0x14, 0x39, 0xee, 0xa1, 0x8b, 0xd4, 0x5c, 0x6e, 0x55, 0x6, 0x50, 0x16, 0xd4}}
	return a, nil
}

var _docGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x0d\xc4\x20\x0c\x05\xd0\x9e\x29\xfe\x02\xd8\xfd\x6d\xe3\x4b\xac\x2f\x44\x82\x09\x78\x7f\xa5\x49\xfd\xa6\x1d\xdd\xe8\xd8\xcf\x55\x8a\x2a\xe3\x47\x1f\xbe\x2c\x1d\x8c\xfa\x6f\xe3\xb4\x34\xd4\xd9\x89\xbb\x71\x59\xb6\x18\x1b\x35\x20\xa2\x9f\x0a\x03\xa2\xe5\x0d\x00\x00\xff\xff\x60\xcd\x06\xbe\x4a\x00\x00\x00")

func docGoBytes() ([]byte, error) {
	return bindataRead(
		_docGo,
		"doc.go",
	)
}

func docGo() (*asset, error) {
	bytes, err := docGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.go", size: 74, mode: os.FileMode(0644), modTime: time.Unix(1573216280, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x7c, 0x28, 0xcd, 0x47, 0xf2, 0xfa, 0x7c, 0x51, 0x2d, 0xd8, 0x38, 0xb, 0xb0, 0x34, 0x9d, 0x4c, 0x62, 0xa, 0x9e, 0x28, 0xc3, 0x31, 0x23, 0xd9, 0xbb, 0x89, 0x9f, 0xa0, 0x89, 0x1f, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_app.down.sql": _0001_appDownSql,

	"0001_app.up.sql": _0001_appUpSql,

	"0002_tokens.down.sql": _0002_tokensDownSql,

	"0002_tokens.up.sql": _0002_tokensUpSql,

	"doc.go": docGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_app.down.sql":    &bintree{_0001_appDownSql, map[string]*bintree{}},
	"0001_app.up.sql":      &bintree{_0001_appUpSql, map[string]*bintree{}},
	"0002_tokens.down.sql": &bintree{_0002_tokensDownSql, map[string]*bintree{}},
	"0002_tokens.up.sql":   &bintree{_0002_tokensUpSql, map[string]*bintree{}},
	"doc.go":               &bintree{docGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
